#!/usr/bin/env ruby

preprocess do
  override(items)
  override(layouts)

  # Create contact items from the contacts metadata.
  raw_contacts.each_with_index do |contact, idx|
    items.create('', contact.merge(kind: 'contact'), "/contacts/#{idx}")
  end

  # Create link items from the links metadata.
  raw_links.each_with_index do |link, idx|
    items.create('', link.merge(kind: 'link'), "/links/#{idx}")
  end

  # layouts.each do |l|
  #   ::STDERR.puts "=== l: #{(l).inspect rescue $!.message}"
  #   ::STDERR.puts "  = l.attributes: #{(l.attributes).inspect rescue $!.message}"
  # end
  # items.each do |i|
  #   ::STDERR.puts "=== i: #{(i).inspect rescue $!.message}"
  #   ::STDERR.puts "  = i.attributes: #{(i.attributes).inspect rescue $!.message}"
  # end
end

ignore '/**/*.disabled'

compile '/data/*.json.erb' do
  filter :erb
  write ext: 'json'
end

compile '/data/*.yaml' do
  filter :metadata_to_json, item: item
  write ext: 'json'
end

compile '/contacts/*' do
  filters_from_extensions(item).each do |f|
    filter f
  end
  layout '/contact.*'
  snapshot :pre_default

  write nil
end

compile '/links/*' do
  filters_from_extensions(item).each do |f|
    filter f
  end
  layout '/link.*'
  snapshot :pre_default

  write nil
end

compile '/blurb.*' do
  filters_from_extensions(item).each do |f|
    filter f
  end
  layout '/blurb.*'
  snapshot :pre_default

  write nil
end

compile '/apps/*' do
  if /\.disabled\Z/.match?(item.identifier)
    write nil
    next
  end
  filters_from_extensions(item).each do |f|
    filter f
  end
  layout '/app.*'
  snapshot :pre_default

  write nil
end

compile '/apps/*', rep: :data do
  if /\.disabled\Z/.match?(item.identifier)
    write nil
    next
  end
  filter :metadata_to_json, item: item, include_content: true
  write nil
end

compile '/config-packs/*' do
  if /\.disabled\Z/.match?(item.identifier)
    write nil
    next
  end
  filters_from_extensions(item).each do |f|
    filter f
  end
  layout '/config-pack.*'
  snapshot :pre_default

  write nil
end

compile '/config-packs/*', rep: :data do
  if /\.disabled\Z/.match?(item.identifier)
    write nil
    next
  end
  filter :metadata_to_json, item: item, include_content: true
  write nil
end

compile '/**/*.html' do
  snapshot :pre_default
  layout '/default.*'

  if item.identifier =~ '**/index.*'
    write item.identifier.to_s
  else
    write item.identifier.without_ext + '/index.html'
  end
end

compile '/**/*.html.erb' do
  filter :erb
  snapshot :pre_default
  layout '/default.*'

  target =
    if item.identifier =~ '**/index.*'
      item.identifier.without_exts + '.html'
    else
      item.identifier.without_exts + '/index.html'
    end

  write target
end

compile '/**/*.md' do
  filter :kramdown
  snapshot :pre_default
  layout '/default.*'

  if item.identifier =~ '**/index.*'
    write item.identifier.to_s
  else
    write item.identifier.without_ext + '/index.html'
  end
end

compile '/**/*.scss' do
  filter :sass, syntax: :scss
  write @item.identifier.without_ext + '.css'
end

compile '/**/*' do
  write item.identifier.to_s
end

layout '/**/*', :erb
